package parser.ocl;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.antlr.runtime.Token;

public class ASTPrePost extends AST {
    private Token fClassName;
    private Token fOpName;
    private List fParamList;    // (ASTVariableDeclaration)
    private ASTType fResultType; // optional
    private List fPrePostClauses;

    public ASTPrePost(Token classname, Token opname, 
                      List paramList, ASTType resultType) {
        fClassName = classname;
        fOpName = opname;
        fParamList = paramList;
        fResultType = resultType;
        fPrePostClauses = new ArrayList();
    }

    public void addPrePostClause(ASTPrePostClause ppc) {
        fPrePostClauses.add(ppc);
    }

    void gen(Context ctx) throws SemanticException {
        // find class
        MClass cls = ctx.model().getClass(fClassName.getText());
        if (cls == null )
            throw new SemanticException(fClassName, 
                                        "Undefined class `" + fClassName.getText() + 
                                        "'.");
        // find operation in class
        MOperation op = cls.operation(fOpName.getText(), false);
        if (op == null )
            throw new SemanticException(fOpName, 
                                        "Class `" + fClassName.getText() + 
                                        "' has no operation `" + fOpName.getText() + 
                                        "'.");


        // map params to VarDeclList
        VarDeclList varDeclList = new VarDeclList(false);
        Iterator it = fParamList.iterator();
        while (it.hasNext() ) {
            ASTVariableDeclaration astDecl = (ASTVariableDeclaration) it.next();
            VarDecl decl = astDecl.gen(ctx);
            try {
                varDeclList.add(decl);
            } catch (IllegalArgumentException ex) {
                throw new SemanticException(astDecl.name(), "Redefinition of `" +
                                            decl.name() + "'.");
            }
        }

        // check for identical signature
        if (! op.paramList().equals(varDeclList) )
            throw new SemanticException(fOpName, "This signature of operation `" + 
                                        fOpName.getText() +
                                        "' does not match its previous declaration in class `" +
                                        fClassName.getText() + "'.");

        Type resultType = null;
        if (fResultType != null ) {
            resultType = fResultType.gen(ctx);
            if (! op.hasResultType() )
                throw new SemanticException(fResultType.getStartToken(), 
                                            "Operation `" + 
                                            fOpName.getText() +
                                            "' has no result type in its previous declaration in class `" +
                                            fClassName.getText() + "'.");

            if (! resultType.equals(op.resultType()) )
                throw new SemanticException(fResultType.getStartToken(), 
                                            "Expected result type `" + op.resultType() +
                                            "', found `" + resultType + "'.");
        } else {
            if (op.hasResultType() )
                throw new SemanticException(fOpName, 
                                            "Expected result type `" + op.resultType() + "'.");
        }

        // enter parameters into scope of expression
        Symtable vars = ctx.varTable();
        vars.enterScope();
        it = fParamList.iterator();
        while (it.hasNext() ) {
            ASTVariableDeclaration astDecl = (ASTVariableDeclaration) it.next();
            VarDecl decl = astDecl.gen(ctx);
            vars.add(astDecl.name(), decl.type());
        }

        it = fPrePostClauses.iterator();
        while (it.hasNext() ) {
            ASTPrePostClause ppc = (ASTPrePostClause) it.next();
            ppc.gen(ctx, cls, op);
        }

        vars.exitScope(); 
    }
}
