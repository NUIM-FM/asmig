(set-option :print-success false)
(set-option :produce-models true)
(set-logic QF_LIA)
(declare-const e6 (Bool))
(declare-const e4 (Bool))
(declare-const t1 (Int))
(declare-const t8 (Int))
(declare-const e1 (Bool))
(declare-const t6 (Int))
(declare-const t7 (Int))
(declare-const t4 (Int))
(declare-const t5 (Int))
(declare-const t2 (Int))
(declare-const e7 (Bool))
(declare-const e2 (Bool))
(declare-const e3 (Bool))
(declare-const e5 (Bool))
(declare-const t3 (Int))
(declare-const e8 (Bool))
(assert (and (>= t1 0) (<= t1 1)))
(assert (and (>= t2 0) (<= t2 1)))
(assert (and (>= t3 0) (<= t3 1)))
(assert (and (>= t4 0) (<= t4 1)))
(assert (and (>= t5 0) (<= t5 1)))
(assert (and (>= t6 0) (<= t6 1)))
(assert (and (>= t7 0) (<= t7 1)))
(assert (and (>= t8 0) (<= t8 1)))
(assert (=> (= t1 1) e1))
(assert (=> (= t2 1) e2))
(assert (=> (= t3 1) e3))
(assert (=> (= t4 1) e4))
(assert (=> (= t5 1) e5))
(assert (=> (= t6 1) e6))
(assert (=> (= t7 1) e7))
(assert (=> (= t8 1) e8))
(assert (=> (= t1 0) (not e1)))
(assert (=> (= t2 0) (not e2)))
(assert (=> (= t3 0) (not e3)))
(assert (=> (= t4 0) (not e4)))
(assert (=> (= t5 0) (not e5)))
(assert (=> (= t6 0) (not e6)))
(assert (=> (= t7 0) (not e7)))
(assert (=> (= t8 0) (not e8)))
(assert (or (or (or e1 e2) e3) e4))
(assert (or (or (or e5 e6) e7) e8))
(assert (or (not (or e1 e5)) (xor e1 e5)))
(assert (or (not (or e2 e6)) (xor e2 e6)))
(assert (or (not (or e3 e7)) (xor e3 e7)))
(assert (or (not (or e4 e8)) (xor e4 e8)))
(assert (or (or (or (= (+ t1 t5) 1) (= (+ t2 t6) 1)) (= (+ t3 t7) 1)) (= (+ t4 t8) 1)))
(assert (xor (= (+ (+ (+ t5 t6) t7) t8) 1) (= (+ (+ (+ t1 t2) t3) t4) 1)))
